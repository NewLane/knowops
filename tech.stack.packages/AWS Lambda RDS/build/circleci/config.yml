#if( ${containerObject} )
#set( $appName = "Container-${containerObject.getName()}" )
#else
#set( $appName = $aib.getApplicationNameFormatted() )
#end
#set( $workingDir = $appName )
version: 2.1
jobs: 

  # core job
  build_test_deploy:

      # assign the working directory
      working_directory: ~/${workingDir}

      # run the steps with Docker as the primary container
      # job commands run in this container
      # CircleCI Java8 image, installs Apache Maven
      # MySQL 8 image
      docker: # run the steps with Docker
        - image: circleci/openjdk:8-jdk-browsers
        - image: mysql:8.0  
          # required env vars
          environment:                            
              MYSQL_ALLOW_EMPTY_PASSWORD: yes
              MYSQL_ROOT_PASSWORD: ''
              MYSQL_DATABASE: circleci
            
      # steps that comprise the `build_test_deploy` job
      steps:
    
          # check out source code to working directory
          - checkout

          # Restore any previous cache
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          - restore_cache:
              key: deps9-{{ .Branch }}-{{ checksum "pom.xml" }}

          # gets the project dependencies and tests using JUnit
          - run: 
              name: Run test using JUnit
              command: mvn dependency:go-offline test -f pom-restful-api.xml
              environment:
                  DATABASE_USERNAME: root
                  DATABASE_PASSWORD: ''
                  DATABASE_DIALECT: org.hibernate.dialect.MySQL8Dialect
                  DATABASE_DRIVER: com.mysql.cj.jdbc.Driver

          # using maven to first package then deploy the generated 
          # Lambda functions.  The key vars (USER_AWS_ACCESSKEY and USER_AWS_SECRETKEY) are 
          # read in as env vars for the current project. 
          # Learn how to add these env vars at https://circleci.com/docs/2.0/env-vars/#setting-an-environment-variable-in-a-project
          - run: 
              name: Deploy AWS Lambda functions
              command: mvn package lambda:delete-lambda lambda:deploy-lambda -f pom-aws-lambda.xml  -DAWS_ACCESSKEY=$USER_AWS_ACCESSKEY -DAWS_SECRETKEY=$USER_AWS_SECRETKEY # deploy the lambda functions 

          # cache Maven dependencies using checksum of pom.xml as the cache-key
          - save_cache: 
              key: deps9-{{ .Branch }}-{{ checksum "pom.xml" }}
              paths:
                  - ~/.m2

          # save the results from the testing that occurred during
          # the maven packaging in the prior step
          - run:
              name: Save test results
              command: |
                  mkdir -p ~/test-results/junit/
                  find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/test-results/junit/ \;
              when: always          
          
          # Upload test results for display in Test Summary: 
          # https://circleci.com/docs/2.0/collect-test-data/
          - store_test_results:
              path: ~/test-results
      
          # Upload test summary for display in Artifacts: 
          # https://circleci.com/docs/2.0/artifacts/
          - store_artifacts:
              path: ~/test-results/junit

# simple workflow to get the build_test_deploy job started

workflows:
  version: 2
  what_to_do:
    jobs:
      - build_test_deploy
